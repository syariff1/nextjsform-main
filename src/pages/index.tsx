import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";

import { api } from "~/utils/api";

export default function Home() {
  const router = useRouter();
  const handleCreateNotePage = () => {
    router.push('/home');
  }
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#feb16d] to-[#e339b1]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Sign in to make a <span className="text-[hsl(280,100%,70%)]">FORM</span>
          </h1>
          <div className="flex items-center justify-center">
            <div
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white"
            >
              <div className="flex flex-col items-center gap-2">
                <p className="text-2xl text-white">
                  Click this
                </p>
                <AuthShowcase />
              </div>
            </div>

          </div>
          
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const router = useRouter();
  const { data: sessionData } = useSession();
  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined,
    { enabled: sessionData?.user !== undefined }
  );

  const handleFormSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // Check if the user is already signed in
    if (sessionData) {
      router.push('/home'); // Redirect to home page if already signed in
    } else {
      // If not signed in, initiate the sign-in process
      await signIn('your-provider', { callbackUrl: '/home' });
    }
  };

  const handleSignOut = async () => {
    await signOut({ callbackUrl: '/' }); // Redirect to the home page after sign-out
  };

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <form onSubmit={handleFormSubmit}>
        <button
          type="submit"
          className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        >
          {sessionData ? "Go to Home" : "Sign in"}
        </button>
      </form>
      {sessionData && (
        <button
          onClick={handleSignOut}
          className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        >
          Sign Out
        </button>
      )}
    </div>
  );
}

